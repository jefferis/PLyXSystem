#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
pLyX
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Flex .Run script(s)
status open

\begin_layout Plain Layout
\begin_inset Flex .stop|break
status open

\begin_layout Plain Layout
-x
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
-n -t
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tp 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Handling
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Formats
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans
Tools \SpecialChar \menuseparator

\family default
 
\family sans
Preferences \SpecialChar \menuseparator

\family default
 
\family sans

\backslash
1 \SpecialChar \menuseparator

\family default
 
\family sans

\backslash
2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
men2 2 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans

\backslash
1 \SpecialChar \menuseparator
 
\backslash
2
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Sans serif
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
men3 3 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans

\backslash
1 \SpecialChar \menuseparator
 
\backslash
2 \SpecialChar \menuseparator
 
\backslash
3
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Sans serif
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
ui 1
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\family sans

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
ui = user interface; Sans serif
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
fn 1
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family typewriter

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
fn = file names; input; Typewriter
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
b 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\series bold

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Bold
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
The pLyX system:
\begin_inset Newline newline
\end_inset

using text macros in LyX
\end_layout

\begin_layout Author
Andrew Parsloe
\begin_inset Newline newline
\end_inset


\size small
aparsloe@clear.net.nz
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Author

\size small
\begin_inset Note Note
status open

\begin_layout Plain Layout
Save this document in 
\emph on
uncompressed
\emph default
 format (
\family sans
Document \SpecialChar \menuseparator
 Compressed
\family default
).
 Use the uncompressed document.
 None of the examples will work otherwise.
 Use the 
\family sans
View other formats
\family default
 button and select 
\family sans
View pLyX
\family default
.
 This will launch a second instance of LyX with a copy of this document
 displayed there and with the 
\family sans
.stop
\family default
 inset removed from the 
\family sans
.Run script(s)
\family default
 inset (above).
 Use the pLyX activating buttons on the copy to expand the macros and compare
 with the unexpanded text of the original.
 Use the 
\family sans
undo pLyX
\family default
 button on the copy to return to the unexpanded document.
 Experiment; play.
 And if you write your own macros, expect to have some crashes.
 Hence always use the 
\emph on
copy
\emph default
, rather than the original.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
The Straightforward
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The pLyX system includes a custom inset, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

, and an associated python script designed to expand text macros.
 You insert the inset into your document at the relevant place, enter a
 macro name into it, and possibly some following arguments, and then, on
 clicking the pLyX activating buttons, the macro expands to a LyX construct
 of some kind.
 Expansion is not limited to words or phrases, but can be anything that
 can be displayed in LyX -- paragraphs, equations, other insets, pictures
 \SpecialChar \ldots{}
 For instance, such macros provide an alternative way of inserting character
 styles into text.
\end_layout

\begin_layout Standard
When I started working on this, I didn't know whether it would be useful
 or just a toy, a curiosity.
 Having used it now for a couple of months, it has become essential.
\end_layout

\begin_layout Section
Putting the pieces in their places
\end_layout

\begin_layout Standard
The custom inset, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

, and its companion inset 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

, are already defined in the LyX module, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pLyX.module
\end_layout

\end_inset

, that was distributed with the 
\begin_inset Quotes els
\end_inset

master
\begin_inset Quotes ers
\end_inset

 (python) scipt, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
pLyX.py
\end_layout

\end_inset

, and its associated files and explanatory document.
 For expanding macros in LyX there is an additional python script, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

, and its help file, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs_help.py
\end_layout

\end_inset

, along with this explanatory document.
\end_layout

\begin_layout Standard
The script, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

, is placed in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
subscripts
\end_layout

\end_inset

 folder in your personal 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
scripts
\end_layout

\end_inset

 directory.
 (This was created when setting up the pLyX system.) The associated help
 script, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs_help.py
\end_layout

\end_inset

, is placed in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
help
\end_layout

\end_inset

 folder in your personal 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
scripts
\end_layout

\end_inset

 directory.
 (Again this was created when setting up the pLyX system.)
\end_layout

\begin_layout Subsection
Colour
\end_layout

\begin_layout Standard
The argument inset wasn't required for the pLyX system calculator, nor for
 sorting tables or lists.
 For expanding macros it is essential.
 It is easy when one has a sequence of insets, to inadvertently introduce
 an argument inset where one meant a macro inset, and vice versa.
 For that reason their label font colours should be easily distinguished
 and readable.
 I've tried three different combinations: blue/none (the default black),
 blue/green and blue/red, in decreasing order of readability and aesthetic
 acceptability (to my eyes).
 Despite which I used blue/red for writing much of this document because
 it provides the greatest contrast between the insets.
 Introducing the wrong inset -- argument for macro or macro for argument
 -- will almost always produce a puzzling error, perhaps a crash.
 Now that the document is written, I've changed the colours back to the
 more acceptable blue/none.
\end_layout

\begin_layout Standard
But it is easy to choose some other pairing.
 Open 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pLyX.module
\end_layout

\end_inset

 in a text editor and change the obvious label font colour (or rather 
\begin_inset Quotes els
\end_inset

color
\begin_inset Quotes ers
\end_inset

) specification there for the macro and argument insets to colours of your
 choice.
 
\end_layout

\begin_layout Subsection
Uncompressed format essential
\end_layout

\begin_layout Standard
This document should be saved in 
\emph on
uncompressed
\emph default
 format (
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
men2
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Document
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Compressed
\end_layout

\end_inset

).
 The scripts of the pLyX system expect 
\emph on
text
\emph default
 files, not compressed files, and trying to expand macros on the compressed
 document will only produce errors.
\end_layout

\begin_layout Standard
Having uncompressed the document, why not now click on the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
View other formats
\end_layout

\end_inset

 button and select 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
View pLyX
\end_layout

\end_inset

? A second instance of LyX will be launched with a copy of the document
 displayed there.
 The document is set up with the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.stop
\end_layout

\end_inset

 inset with the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-x
\end_layout

\end_inset

 global option, so that when the copy is displayed in the second, viewer
 LyX, it will be ready to respond to the three pLyX activating buttons.
 
\end_layout

\begin_layout Standard
The document is intended to be read in LyX, in both macros-expanded and
 macros-unexpanded form, in order to see their various effects.
 It can be compiled to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

 -- and should be (after macro expansion) just to see how things look --
 but both the macro and argument insets are invisible to LaTeX and will
 compile only to white space, perhaps leaving gaps in the flow of the text.
 The repetition macros in particular benefit from compiling to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Uses of the 
\family sans
.expand macro
\family default
 inset
\end_layout

\begin_layout Subsection
Global use
\end_layout

\begin_layout Standard
The first use to which the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset is put is its global use when inserted into the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.Run script(s)
\end_layout

\end_inset

 inset at the start of the document.
 It tells 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pLyX.py
\end_layout

\end_inset

 (the script that is called when the pLyX activating buttons are clicked)
 what sub-script to import -- in this case 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

.
 The latter does all the work.
 Global options can be investigated at this point -- put 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-h
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-v
\end_layout

\end_inset

 into the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset and click the buttons to get help or version information.
\end_layout

\begin_layout Subsection
Defining use
\end_layout

\begin_layout Standard
The second use of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset is as a container in which to define macros or their expansions.
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui 0
\backslash
fn 0
\end_layout

\end_inset

For instance I have defined a 
\begin_inset Quotes els
\end_inset

Tools/Preferences
\begin_inset Quotes ers
\end_inset

 macro:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tp 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Handling
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Formats
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans
Tools \SpecialChar \menuseparator

\family default
 
\family sans
Preferences \SpecialChar \menuseparator

\family default
 
\family sans

\backslash
1 \SpecialChar \menuseparator

\family default
 
\family sans

\backslash
2
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
sans serif
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

The parts of a definition, in order, are:
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This will be clearer if the main LyX window is widened sufficiently to show
 the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

 macro on one line.
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
macro name (
\begin_inset Quotes els
\end_inset

tp
\begin_inset Quotes ers
\end_inset

 in the example), a 
\emph on
case sensitive
\emph default
 alphanumeric sequence, which generally starts with a letter and may include
 the underscore _ character;
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Starting with a letter is not strictly necessary -- indeed, later, when
 discussing repetition macros we shall define ones with the names 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

, \SpecialChar \ldots{}
, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
10
\end_layout

\end_inset

 -- but it does avoid complicating situations arising from certain uses
 of the backslash.
 
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
number of arguments (from 0, 1, \SpecialChar \ldots{}
 and 
\emph on
not 
\emph default
restricted to a maximum of 9) and necessarily separated from the name by
 a space; if a macro uses no arguments (a pure abbreviation), a zero for
 the number of arguments can be, and generally is, omitted;
\end_layout

\begin_layout Itemize
default values, corresponding to the first, second, etc., argument, each
 in its own argument inset; (two are used in the example, but none need
 be provided); 
\end_layout

\begin_layout Itemize
the macro expansion (in another 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset), in which the arguments are denoted by backslashed digits (from
 1 onwards); 
\end_layout

\begin_layout Itemize
and, as the example shows, LyX notes can be used to comment on definitions.
 
\end_layout

\begin_layout Subsection
\begin_inset Quotes els
\end_inset

Using
\begin_inset Quotes ers
\end_inset

 use
\end_layout

\begin_layout Standard
The third use of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset, and the most common, is its 
\begin_inset Quotes els
\end_inset

using
\begin_inset Quotes ers
\end_inset

 use, where it is inserted in text with a macro name inside and is followed
 by none, one or more arguments in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

 insets.
 When the macros are expanded, these insets are replaced by their macro
 expansions.
 
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

 macro
\end_layout

\begin_layout Standard
There is a built-in macro, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

; it's function is to toggle macro expansion.
 It turns off all macro expansion following its point of insertion, then
 turns it on again if re-inserted later.
 Its default behaviour is to delete itself in the process, so allowing only
 one use.
 Alternatively, insert the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-t
\end_layout

\end_inset

 option in the global 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset; the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

 macro is then retained in the document when macros are expanded.
 An example of its use is provided in the previous section.
\end_layout

\begin_layout Subsubsection
Macros in notes
\end_layout

\begin_layout Standard
By default macros in LyX's yellow notes are 
\emph on
not
\emph default
 expanded.
 If you have such macros in your document and want them expanded, use the
 global 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-n
\end_layout

\end_inset

 option in the global 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset.
 A 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

 macro in a yellow note will have no effect unless the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-n
\end_layout

\end_inset

 option is active.
\end_layout

\begin_layout Subsubsection
Inline and paragraph macros
\end_layout

\begin_layout Standard
The overwhelming use of macros will be inline.
 For that reason, 
\emph on
all
\emph default
 macros have their outer layout statements stripped from them (in LyX's
 native file format) when used.
 Usually these will be no more than an opening 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
begin_layout Plain Layout
\end_layout

\end_inset

 and a closing 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
end_layout
\end_layout

\end_inset

 statement.
 But a macro with contents intended to be set in a particular paragraph
 environment, say a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Quote
\end_layout

\end_inset

 environment, will need to be inserted explicitly into such an environment.
 Even though the macro's contents may have been formatted according to that
 environment, the environment does not travel with it.
 Any 
\emph on
internal
\emph default
 environments in the macro do; the restriction applies only to the outermost
 environment.
\end_layout

\begin_layout Standard
In practice it is usually intuitively obvious 
\emph on
not
\emph default
 to use a macro inserting paragraphed material -- say, some verses of a
 poem -- 
\emph on
inline
\emph default
 into a standard paragraph.
 The restriction sounds more restrictive than it is.
\end_layout

\begin_layout Subsection
Deleting and redefining macros
\end_layout

\begin_layout Standard
Sometimes one may want to redefine a macro.
 The link between macro name and its expansion is kept in a python dictionary.
 In python, a dictionary entry attaching a new meaning to an old key simply
 supplants the old with the new, but that won't do here since the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

 script takes different actions depending on whether a name is in the dictionary
 or not.
 The previous definition needs to be explicitly removed or else puzzling
 behaviour and errors will result.
 
\end_layout

\begin_layout Standard
The way to delete a macro is to insert the macro as if you are going to
 use it, but include a space followed by a zero: for instance
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn 0
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Since I still want to use this macro in this document, I shall redefine
 it to its old value
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family typewriter

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
file names; input; typewriter
\end_layout

\end_inset


\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
The process can be telescoped into the one inset (and note the use of the
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

 macro):
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn 0
\end_layout

\begin_layout Plain Layout
fn 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family typewriter

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
file names; input; typewriter
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
or, more neatly, 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn 0
\backslash
fn 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family typewriter

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
file names; input; typewriter
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

The function of the backslash here is simply to ensure that in native LyX
 format, the ensuing macro definition starts on a new line -- check the
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
View Source
\end_layout

\end_inset

 window.
 (Using a backslash like this is a main reason for macro names to start
 with a letter, not a digit.)
\end_layout

\begin_layout Subsection
Shortcut keys
\end_layout

\begin_layout Standard
If text macros are to be useful rather than just a toy or a curiosity, then
 it is essential that convenient shortcuts lying naturally under the fingers
 are available, first, for inserting an 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset, second, for jumping out of that (and any other) inset to the right,
 and third, for inserting an 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

 inset.
 I use the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cua
\end_layout

\end_inset

 key bindings and find 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+H
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+J
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+;
\end_layout

\end_inset

 unassigned.
 Initially I chose 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+H
\end_layout

\end_inset

 for inserting the macro inset,
\begin_inset Foot
status open

\begin_layout Plain Layout
 The 
\begin_inset Quotes els
\end_inset

H
\begin_inset Quotes ers
\end_inset

 coming from the Anglo-Greek spelling, 
\begin_inset Quotes els
\end_inset


\begin_inset Formula $\mathrm{mac\rho}$
\end_inset


\begin_inset Quotes ers
\end_inset

.
\end_layout

\end_inset

 but after considerable use decided to forego that in favour of cancelling
 LyX's default assignation of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+K
\end_layout

\end_inset

 to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
line-delete-forward 
\end_layout

\end_inset

 (which I have never used) and assign it instead to
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Go to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Editing
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Shortcuts
\end_layout

\end_inset

, click 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
New
\end_layout

\end_inset

, fill the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Function
\end_layout

\end_inset

 slot, click on the blank key under 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Shortcut
\end_layout

\end_inset

 and press your shortcut key combination.
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Save
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Apply
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
flex-insert 
\begin_inset Quotes eld
\end_inset

.expand macro|txtmacs
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
(If copying and pasting, delete the slanted quotes and replace with straight
 double quotes; it's simpler just to type it into the slot, when you get
 straight quotes automatically.) 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+J
\end_layout

\end_inset

 (J for 
\emph on
j
\emph default
ump)
\emph on
 
\emph default
is assigned to
\end_layout

\begin_layout LyX-Code
command-sequence line-end; char-right; toggle-inset;
\end_layout

\begin_layout Standard
and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl+;
\end_layout

\end_inset

 to
\end_layout

\begin_layout LyX-Code
flex-insert .[argument]
\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
J
\end_layout

\end_inset

 (for Jump), 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
K
\end_layout

\end_inset

 (for maKro), and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
;
\end_layout

\end_inset

 on a standard qwerty keyboard, sit under the fingers of the right hand
 when in their 
\begin_inset Quotes els
\end_inset

home
\begin_inset Quotes ers
\end_inset

 position.
 On the particular keyboard I use, the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl
\end_layout

\end_inset

 key is easily reached by the little finger of the left hand.
 Other keyboards may require some variation from these suggestions -- perhaps
 the use of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Alt
\end_layout

\end_inset

 key rather than the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Ctrl
\end_layout

\end_inset

 key.
 But the point is, the shortcuts really are shortcuts; they are typed easily
 and do not involve unnatural stretches of the fingers.
\end_layout

\begin_layout Section
Macros without arguments: abbreviations
\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
ad 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
antidisestablishmentarianism
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Unlikely to get much use!
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
wph 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\emph on
History of Western Philosophy
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
A formatted title
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
verse 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Quote
Nature, and Nature's laws lay hid in night.
\begin_inset Newline newline
\end_inset

God said, 
\emph on
Let Newton be!
\emph default
 and all was light.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hphantom{God said, Let Newton be} 
\end_layout

\end_inset

(Alexander Pope)
\end_layout

\begin_layout Quote
It did not last: the Devil howling 
\begin_inset Quotes els
\end_inset

Ho!
\begin_inset Newline newline
\end_inset

Let Einstein be!
\begin_inset Quotes ers
\end_inset

 restored the status quo.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hphantom{God said, Let Newton be} 
\end_layout

\end_inset

(Sir J.
 C.
 Squire)
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
A muli-line macro
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
yn 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
This is a rather vacuous yellow note that yet makes a point.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
pyx 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename E:/Program files/LyX 2.0.5/Resources/images/banner.png
	scale 70

\end_inset


\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
A familiar picture
\end_layout

\end_inset


\end_layout

\end_inset

One obvious possibile use is simply to abbreviate a long word or phrase:
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ad
\end_layout

\end_inset

 -- but this makes sense only if the word or phrase is going to be referred
 to a number of times.
 A review of a book or a film may warrant a macro abbreviating the title.
 The macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
wph
\end_layout

\end_inset

 does that for Bertrand Russell's 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
wph
\end_layout

\end_inset

 and, moreover, shows how character formatting is part and parcel of the
 expansion.
 
\end_layout

\begin_layout Standard
Or an abbreviation may be a multi-line or multi-paragraph piece of text,
 perhaps lines of a poem that are going to be referred to more than once
 in a critical discussion:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
verse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note in this case that when defining the macro, the lines of verse were
 placed in a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Quote
\end_layout

\end_inset

 environment.
 That environment was stripped from the macro on expansion but, since the
 macro has been set into a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Quote
\end_layout

\end_inset

 environment, all is restored in the end.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
pyx
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A familiar picture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All these examples involve 
\emph on
text
\emph default
, but expansions aren't limited to text.
 They can be equations, inline or display, pictures, insets of some kind
 -- for example a note inset 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
yn
\end_layout

\end_inset

 -- indeed anything that can be displayed in LyX.
 I shall demonstrate this generality of expansion with equations in display
 format (largely for the sake of the joke).
\end_layout

\begin_layout Subsection
Equations in abbreviations
\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tv
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Formula 
\[
T+V=E,\,\mathrm{const.}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
emc 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Formula 
\[
E=mc^{2}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The law of energy conservation tells us that the sum of potential energy
 (
\begin_inset Formula $V$
\end_inset

) and kinetic energy (
\begin_inset Formula $T$
\end_inset

) is constant: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tv
\end_layout

\end_inset

 From Einstein's special relativity we learn that energy is proportional
 to mass:
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Although energy-mass equivalence originates with Einstein, who derived
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
emc
\end_layout

\end_inset

 on a number of occasions and in a number of ways, it was Planck who first
 established the full generality of the law, as a deduction from special
 relativity.
 (Note that expansion occurs within footnotes.)
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
emc
\end_layout

\end_inset

 Hidden in the interplay of these two laws lies a profound truth.
 
\end_layout

\begin_layout Standard
Imagine, if you will, a rounded boulder perched precariously on a hillside.
 A slight trembling of the earth, a gust of wind, rain-softened soil --
 who knows? -- but 
\emph on
something
\emph default
 set it in motion.
 At first a gentle rolling, then more urgency as it gathered speed, finally
 a 
\emph on
hurtling
\emph default
 as it careered down the hillside.
 But all the time, at every moment of its motion, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tv
\end_layout

\end_inset

 And all the time, again at every moment of its motion, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
emc
\end_layout

\end_inset

 There is, there can be, no escape from the conclusion: since 
\begin_inset Formula 
\[
m=\frac{E}{c^{2}}=\frac{T+V}{c^{2}}=\mathrm{const.,}
\]

\end_inset

it follows that 
\emph on
a rolling stone gathers no mass
\emph default
.
 
\end_layout

\begin_layout Subsection
Abbreviations within abbreviations
\end_layout

\begin_layout Standard
Abbreviations can be 
\emph on
nested
\emph default
, one within another -- in theory there is no limit to the depth of nesting.
\begin_inset Foot
status open

\begin_layout Plain Layout
And, of course, it's perfectly possible to constuct an infinite loop in
 this way, which will trigger a python error.
 The example also shows that new definitions do not need to start on new
 lines inside the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset.
 The critical thing is that they begin on new lines 
\emph on
in LyX's native format
\emph default
.
 Starting a new definition hard against the 
\begin_inset Quotes els
\end_inset

back end
\begin_inset Quotes ers
\end_inset

 of an inset (no spaces!) as is done in the example ensures that they 
\emph on
do
\emph default
 start on new lines in LyX's native format.
 Check the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
View Source
\end_layout

\end_inset

 window if in doubt.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
hg
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
hyperbolic 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
gy
\end_layout

\end_inset


\end_layout

\end_inset

gy
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
geometry
\end_layout

\end_inset

eg
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
Euclidean 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
gy
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
3d
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
three-dimensional
\end_layout

\end_inset

3dhg
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
3d
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
hg
\end_layout

\end_inset


\end_layout

\end_inset

3deg
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
3d
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
eg
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The prehistory of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
hg
\end_layout

\end_inset

 is long, its history by comparison, fairly brief -- indeed an order of
 magnitude briefer than that of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
eg
\end_layout

\end_inset

.
 Stephen Hawking has stated that he finds doing 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
3deg
\end_layout

\end_inset

 hard but it does not follow, inversely from the lengths of their histories,
 that doing 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
3dhg
\end_layout

\end_inset

 is an order of magnitude 
\emph on
harder
\emph default
 than doing 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
3deg
\end_layout

\end_inset

.
 Of course this argument is not an exercise in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
gy
\end_layout

\end_inset

 as such, more an exercise -- like the univese -- in 
\emph on
expansion
\emph default
.
\end_layout

\begin_layout Section
Macros with one argument
\end_layout

\begin_layout Standard
Macros without arguments (abbreviations) may well be useful at times, but
 even allowing for nesting, they are a little 
\emph on
dull
\emph default
.
 Once one allows arguments with macros, things get interesting.
 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
hg 0
\backslash
hg 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
h
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1yperbolic geometry
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a little more complicated than before.
 Once again, since this is a 
\emph on
re
\emph default
definition, things start with 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
hg 0
\end_layout

\end_inset

 followed by the backslash.
 Then comes a digit, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

 in this example, specifying the number of arguments.
 Next is an 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

 inset containing the single letter 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
h
\end_layout

\end_inset

, the default value of the argument (in case 
\emph on
no
\emph default
 argument is provided).
 Finally, there is the macro inset containing the expansion, including the
 argument parameter 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

.
 In the middle of a sentence, one would write 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
hg
\end_layout

\end_inset

 as if it were an abbreviation, pure and simple.
 The default value of the argument -- 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
h
\end_layout

\end_inset

 -- is used to replace 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

.
 The difference now is that we can also use the macro at the start of a
 sentence.
 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
hg
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
H
\end_layout

\end_inset

 
\emph on
does 
\emph default
have an argument supplied, an initial capital letter which replaces the
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
This gives the macro a simple 
\begin_inset Quotes els
\end_inset

if-then-else
\begin_inset Quotes ers
\end_inset

 structure: if argument exists then use it else use default.
\end_layout

\begin_layout Section
Character styles
\end_layout

\begin_layout Standard
The problem with defining and using one's own character styles is the somewhat
 fiddly business of inserting them in a document -- going to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
men2
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Edit
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Text Style
\end_layout

\end_inset

 and then selecting from the list with the arrow keys and pressing 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui 
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

.
 In the larger scheme of things the problem is 
\emph on
very
\emph default
 minor, but minor things, repeated, irritate.
 Accelerator keys can help: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui 
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Alt+E
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui 
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
S
\end_layout

\end_inset

 and then the arrow keys and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui 
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

, but on many keyboards, the arrow keys are a stretch -- they take the hands
 away from their familiar position over the keys.
 Text macros provide an alternative method of entering character styles.
 How one uses them may depend on whether one intends the document to be
 read in LyX or as a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
I've added LyX's logical markup module to this document so that the four
 character styles defined there are available under 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
men2
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Edit
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Text Style
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
code 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset

noun 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex Noun
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset

emph 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset

strong 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Again note how the definitions start 
\emph on
hard 
\emph default
against the 
\begin_inset Quotes els
\end_inset

back ends
\begin_inset Quotes ers
\end_inset

 of the preceding insets.
 This ensures that each macro name begins a line in LyX's native format
 -- there is no preceding space.) Here is a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
strong
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
strong
\end_layout

\end_inset

 word; here is a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
code
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
code
\end_layout

\end_inset

 word; here is an 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
emph
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
emph
\end_layout

\end_inset

asized part of a word; and here is a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
noun
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
noun
\end_layout

\end_inset

, all ready to be turned into a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
code
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
But if you only want your text read in LyX, simpler definitions may suffice.
\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
code 0
\backslash
code 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family typewriter

\backslash
1
\end_layout

\end_inset

noun 0
\backslash
noun 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\noun on

\backslash
1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
emph 0
\backslash
emph 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\emph on

\backslash
1
\end_layout

\end_inset

strong 0
\backslash
strong 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\series bold

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset

(Since these are 
\emph on
re
\emph default
definitions, we have 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
code 0
\end_layout

\end_inset

 etc.)
\emph on
 
\emph default
With these redefined macros, here is a 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
strong
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
strong
\end_layout

\end_inset

 word; here is a 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
code
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
code
\end_layout

\end_inset

 word; here is part of an 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
emph
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
emph
\end_layout

\end_inset

asized word; and here is a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
noun
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
noun
\end_layout

\end_inset

, all ready to display properly in LyX.
 
\end_layout

\begin_layout Standard
As noted earlier, convenient keyboard shortcuts are essential for text macros
 to be useful.
 The point in the present context is that you don't need separate shortcuts
 for each character style, just the 
\emph on
same
\emph default
 shortcuts used to insert all other text macros, jump out of insets, and
 insert arguments -- 
\emph on
three
\emph default
 shortcuts in total.
 
\end_layout

\begin_layout Subsection
Additive effect of styles
\end_layout

\begin_layout Standard
Styles are additive.
 Consider the macro
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
styles 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\emph on
emph
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\series bold
bold 
\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
in which two styles feature in different parts of the macro.
 Let's feed this macro an argument in sans serif font, and then no argument
 at all, so that it falls back on its default value:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
styles
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\family sans
sans
\end_layout

\end_inset

 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
styles
\end_layout

\end_inset


\end_layout

\begin_layout Section
Macros with two arguments
\end_layout

\begin_layout Standard
One of the impulses driving the writing of this particular script, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

, was the wish to be able to insert something like 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
toggle
\end_layout

\end_inset

 for something like 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

 with its sans serif font and where-do-I-find-it? menu separator character.
 So lets (re)define the macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tp 0
\backslash
tp 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Handling
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Formats
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans
Tools \SpecialChar \menuseparator

\family default
 
\family sans
Preferences \SpecialChar \menuseparator

\family default
 
\family sans

\backslash
1 \SpecialChar \menuseparator

\family default
 
\family sans

\backslash
2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case -- after the now familiar deleting instruction 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tp 0
\end_layout

\end_inset

 -- we have the name, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

, the number of arguments (2), two default values in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

 insets, and the macro expansion, styled in sans serif, with the menu separator
 character inserted, and with two argument parameters 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

.
 If, in use, we omit one or both arguments, the macro falls back on the
 supplied default values.
 
\end_layout

\begin_layout Subsection
Prosaic notation
\end_layout

\begin_layout Standard
To avoid cluttering the text with toggle macros, it is convenient to introduce
 a 
\begin_inset Quotes els
\end_inset

prosaic
\begin_inset Quotes ers
\end_inset

 notation.
 I shall use square brackets to denote macro insets, and parentheses to
 denote argument insets.
 Thus our revised definition of the hyperbolic geometry macro above, in
 this notation, is 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[h 0
\backslash
hg 1 (h)[
\backslash
1yperbolic geometry]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and a reference to its use within a sentence would be 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[hg]
\end_layout

\end_inset

, and at the start of a sentence, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[hg](H)
\end_layout

\end_inset

.
 Our revised Tools/Preferences macro is
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp 0
\backslash
tp 2 (File Handling)(File Formats)[{sans}Tools > Preferences > 
\backslash
1 > 
\backslash
2]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
using 
\begin_inset Quotes els
\end_inset

>
\begin_inset Quotes ers
\end_inset

 for the menu separator character and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
{sans}
\end_layout

\end_inset

 for the styling command.
 The idea is to indicate structure.
\end_layout

\begin_layout Subsection
Expansions
\end_layout

\begin_layout Standard
Armed with this notation, we now have the following sequence of expansions:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Converters) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Converters
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Editing)(Shortcuts) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Editing
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Shortcuts
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In any macro definition, the default values are ordered in a sequence correspond
ing to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

, \SpecialChar \ldots{}
 If, in use, fewer arguments are supplied than the macro takes, then they
 are the 
\emph on
later
\emph default
 rather than initial arguments.
 Thus 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
(Converters)
\end_layout

\end_inset

 is the 
\emph on
second
\emph default
 argument; the first is not given and falls back on the default value.
\end_layout

\begin_layout Standard
To give a more extreme example, if we had a definition like
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mac 4 (default1)(default2)(default3)(default4)[<expansion involving 
\backslash
1, 
\backslash
2, 
\backslash
3, 
\backslash
4>]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then in use, the arguments follow the pattern
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mac]
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
All 4 arguments supplied by default1, default2, default3, default4.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mac](arg4)
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
The other 3 arguments supplied by default1, default2, default3.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mac](arg3)(arg4)
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
The other 2 arguments supplied by default1 and default2.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mac](arg2)(arg3)(arg4)
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
The other argument supplied by default1.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mac](arg1)(arg2)(arg3)(arg4)
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
All arguments explicitly given.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For macros that take more than one argument, but where only one is supplied,
 it is easy to think of that as the first argument.
 It is always the 
\emph on
last
\emph default
.
\end_layout

\begin_layout Chapter
The Curly
\end_layout

\begin_layout Standard
The macros presented so far have all been straightforward.
 But there are limits to straightforwardness.
 Having reached the point where the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[tp]
\end_layout

\end_inset

 macro was available (and a similar one for document settings), I found
 myself wanting to write 
\family sans
Tools \SpecialChar \menuseparator

\family default
 
\family sans
Preferences \SpecialChar \menuseparator
 Paths
\family default
 (for instance).
 Using 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[tp](Paths)
\end_layout

\end_inset

 wasn't going to work.
 That would give the ridiculous 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Paths
\end_layout

\end_inset

.
 Perhaps 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[tp](Paths)()
\end_layout

\end_inset

 with an empty argument? Doing that is an improvement: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Paths
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

; it's an easy matter to delete the final extruding menu separator character,
 but it still irks.
 Or, of course, I could define a new macro with one argument to give the
 desired result.
 Yes, but it is frustrating not being able to encompass all the desired
 outcomes in the 
\emph on
one 
\emph default
macro.
 
\end_layout

\begin_layout Standard
What is needed is the ability to make 
\emph on
conditional
\emph default
 expansions.
 Expansion does, already, have a conditional element: if argument 
\emph on
exists
\emph default
 then use it else use default.
 But there is really a 
\emph on
three
\emph default
-way split: 
\begin_inset Quotes els
\end_inset

argument exists and is non-empty
\begin_inset Quotes ers
\end_inset

; 
\begin_inset Quotes els
\end_inset

argument exists and is empty
\begin_inset Quotes ers
\end_inset

; and 
\begin_inset Quotes els
\end_inset

argument does not exist
\begin_inset Quotes ers
\end_inset

.
 The 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

 macro already uses 
\begin_inset Quotes els
\end_inset

argument exists and is non-empty
\begin_inset Quotes ers
\end_inset

 and 
\begin_inset Quotes els
\end_inset

argument does not exist
\begin_inset Quotes ers
\end_inset

 to proper effect.
 What is wanted is: if argument is
\emph on
 empty
\emph default
 then use it else use default, since that allows the possibility of inserting
 nothing rather than the default action of inserting the menu separator
 character.
 
\end_layout

\begin_layout Section
The 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 conditionals
\end_layout

\begin_layout Standard
To this end, the names 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 are hard-coded into 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

 and their names placed in the initial macro dictionary.
 If you use a macro with the name 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 and it is supplied with a 
\emph on
non-empty
\emph default
 argument, that argument is blocked from further processing.
 The macro in that case has to fall back on its default value.
 Since this is already what happens if 
\emph on
no
\emph default
 argument is supplied, the desired conditional is obtained: if argument
 is 
\emph on
empty 
\emph default
then use it else use default.
 Similarly, if you use a macro with the name 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 and it is supplied with an 
\emph on
empty 
\emph default
argument, that argument is blocked from further processing.
 Again, the macro falls back on its default value.
 Since this is already what happens if 
\emph on
no
\emph default
 argument is supplied, a second conditional is obtained: if argument is
 
\emph on
non-empty
\emph default
 then use it else use default.
\end_layout

\begin_layout Standard
So let's define macros using these names and use as default the menu separator
 character.
 (Because the names are already in the macro dictionary we still need the
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0 0
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1 0
\end_layout

\end_inset

 statements.)
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0 0
\backslash
if0 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset

\SpecialChar \menuseparator
 
\end_layout

\end_inset


\family sans

\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans

\backslash
1
\end_layout

\end_inset


\family default
 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\backslash
1 in sans serif
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
if1 0
\backslash
if1 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset

\SpecialChar \menuseparator
 
\end_layout

\end_inset


\family sans

\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans

\backslash
1
\end_layout

\end_inset


\family default
 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\backslash
1 in sans serif
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The defaults here include a protected space before and an ordinary space
 after the menu separator character.
 (It's impossible -- but see below -- to insert an ordinary space at the
 start of an inset.) Although the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 is in sans serif, the menu separator character is not.
 If it turns out to be used, it will be converted to sans serif.
 Then the conditional behaviour just described verbally can be summarised
 thus:
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Note that a macro with any 
\emph on
other
\emph default
 name and this definition will behave in the 
\begin_inset Quotes els
\end_inset

normal
\begin_inset Quotes ers
\end_inset

 expected way: regurgitating in sans serif what is fed to it in its argument;
 if no argument is supplied, printing the menu separator character.
 It is because their names are 
\begin_inset Quotes els
\end_inset

hard-coded
\begin_inset Quotes ers
\end_inset

 in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

 to do so that the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macros behave differently.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0](x) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0]() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1](x) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now it is possible to define the desired Tools/Preferences macro that takes
 care of 
\emph on
all
\emph default
 the possibilities:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tp 0
\backslash
tp 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Handling
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Formats
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans
Tools \SpecialChar \menuseparator

\family default
 
\family sans
Preferences
\family default

\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\family sans

\backslash
1
\family default

\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\family sans

\backslash
2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the second argument presented to this revised 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

 macro is empty, then 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

 prints nothing and since 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0](
\backslash
2) => [if0]() => 
\end_layout

\end_inset

, it also prints nothing.
 A full set of expansion possibilities is now available (I've inserted fullstops
 after each to show that there are no unintended trailing spaces):
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Converters) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Converters
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Editing)(Shortcuts) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Editing
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Shortcuts
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Paths)() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Paths
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp]()() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
\end_layout

\begin_layout Section
The 
\begin_inset Quotes els
\end_inset

invisible punctuator
\begin_inset Quotes ers
\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To my eye, however, the protected spaces in these expansions irritate.
 Of course they don't show in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

 but many documents of the kind showing menu expansions are only ever going
 to be read within LyX.
 The protected spaces are needed because, as noted, ordinary spaces can't,
 by default, be inserted at the start of an inset.
 One solution is to set the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
FreeSpacing
\end_layout

\end_inset

 tag to 1 (True) in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pLyX.module
\end_layout

\end_inset

 for both the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

 insets.
 But that would mean being doubly careful not to insert spaces before macro
 names in both kinds of insets, both when defining macros and when using
 them.
 Since there are alternatives available, I have chosen to leave the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
FreeSpacing
\end_layout

\end_inset

 tags at their default value (0, False).
 Instead, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

 uses the hitherto unused parameter 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 as an 
\begin_inset Quotes els
\end_inset

invisible punctuation mark
\begin_inset Quotes ers
\end_inset

 which can be inserted at the start of an inset and followed by a space.
 When expanded, the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 leaves no trace but the space is there.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
And note how it is necessary to write 
\begin_inset Quotes els
\end_inset


\backslash

\backslash
00
\begin_inset Quotes ers
\end_inset

 within the macro to get 
\begin_inset Quotes els
\end_inset


\backslash
0
\begin_inset Quotes ers
\end_inset

 inserted in the text.
 Simply writing 
\begin_inset Quotes els
\end_inset


\backslash
0
\begin_inset Quotes ers
\end_inset

 within the macro would result in precisely nothing -- the 
\begin_inset Quotes els
\end_inset

invisible
\begin_inset Quotes ers
\end_inset

 part of 
\begin_inset Quotes els
\end_inset

invisible punctuator
\begin_inset Quotes ers
\end_inset

 -- being inserted in the text.
\end_layout

\end_inset

 Hence redefine the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macros in this way:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0 0
\backslash
if0 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
0 \SpecialChar \menuseparator
 
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout

\backslash
1 in sans serif
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
if1 0
\backslash
if1 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
0 \SpecialChar \menuseparator
 
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\family sans

\backslash
1
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout

\backslash
1 in sans serif
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then the sequence of Tools/Preferences expansions becomes
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Converters) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Converters
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Editing)(Shortcuts) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Editing
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Shortcuts
\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp](Paths)() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Paths
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tp]()() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tp
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
And, yes, that finally is what is wanted.
\end_layout

\begin_layout Section
Repetitions
\end_layout

\begin_layout Standard
Another kind of use for macros is to write a sequence of, say, asterisks.
 Obviously one way is just to hold your finger on the asterisk key but,
 if you want precisely 35 asterisks (for instance), it is more difficult.
 First define a macro which prints the character to be repeated.
 This macro can be a pure abbreviation:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[char [*]]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
*
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, define some basic 
\begin_inset Quotes els
\end_inset

number
\begin_inset Quotes ers
\end_inset

 macros, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

, \SpecialChar \ldots{}
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
10
\end_layout

\end_inset

 (one could get by with fewer, but the arithmetic is simpler using 10):
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[0 1 []1 1 (char)[
\backslash
1]2 1 (char)[
\backslash
1
\backslash
1]\SpecialChar \ldots{}
]: 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
0 1 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

1 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

2 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\end_layout

\end_inset

3 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset

4 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset

5 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset

6 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
7 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset

8 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset

9 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset

10 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only 
\begin_inset Quotes els
\end_inset

 clever
\begin_inset Quotes ers
\end_inset

 thing about this is the use of the macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
char
\end_layout

\end_inset

 in the default value for each of these (except 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 -- where it is redundant).
 It means that if we use the macro without an argument, it falls back on
 the default value, the macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
char
\end_layout

\end_inset

 which is an 
\begin_inset Quotes els
\end_inset

abbreviation
\begin_inset Quotes ers
\end_inset

 for the asterisk.
 Let's try one of these out: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[8]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
8
\end_layout

\end_inset

.
 Addition is straightforward.
 We simply place two or more of these number macros side-by-side: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[7][6]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
7
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
6
\end_layout

\end_inset

 gives 13 asterisks.
 
\end_layout

\begin_layout Standard
Now things get more interesting.
 We define a multiplication macro, a prefix operator with two arguments;
 I've called it 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
mul
\end_layout

\end_inset

 in keeping with Postscript's postfix multiplication operator.
 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mul 2 (1)(0)[[tmp 0
\backslash
tmp [[
\backslash
1]([
\backslash
2])]] [tmp]]:
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
mul 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tmp 0
\backslash
tmp 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tmp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The expansion of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset

 is in two parts, a first, larger, defining part for the macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
tmp
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[tmp 0
\backslash
tmp [[
\backslash
1]([
\backslash
2])]]
\end_layout

\end_inset

, and a second, 
\begin_inset Quotes els
\end_inset

using
\begin_inset Quotes ers
\end_inset

 part.
 The default values are discussed below.
 To test it, let's try to produce a sequence of 35 asterisks.
 Since 
\begin_inset Formula $7\times5=35$
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mul](7)(5) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
7
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
which does indeed give us our 35 asterisks.
 Note that the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 macro behaves as its name suggests.
 For instance
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mul](4)(0) =>
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
4
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mul](0)(8) =>
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
8
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
To cover all numbers up to 100 (and beyond) we define a multiplication-by-10
 macro, called 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
10x
\end_layout

\end_inset

, the 
\begin_inset Quotes els
\end_inset

x
\begin_inset Quotes ers
\end_inset

 suggesting the familiar multiplication symbol 
\begin_inset Formula $\times$
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
10x 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
mul
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
10
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hence an alternative way to produce 35 asterisks is 
\begin_inset Formula $10\times3+5$
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[10x](3)[5]:
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
10x
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
3
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
5
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Obviously this method can cope with prime numbers which can't be reached
 simply by multiplying two numbers together; for example, to create a sequence
 of 37 asterisks, substitute 7 for the 5 in this expression.
\end_layout

\begin_layout Standard
If one wants some other character than the asterisk, redefine 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
char
\end_layout

\end_inset

.
 In fact, why restrict oneself to a single character? For instance, the
 redefinition 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
char 0
\backslash
char 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
blah-
\end_layout

\end_inset


\end_layout

\end_inset

 allows the quick creation of a large passage of blather:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
10x
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
8
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
7
\end_layout

\end_inset


\emph on
blah
\emph default
.
\end_layout

\begin_layout Subsection
Default values
\end_layout

\begin_layout Standard
So much for blather.
 Redefining 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
char
\end_layout

\end_inset

 to an asterisk, 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char 0
\backslash
char 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
*
\end_layout

\end_inset


\end_layout

\end_inset

, what happens if 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset

 is supplied with only one argument? This will necessarily be the 
\emph on
second
\emph default
 argument, so that the first will fall back on its default value which is
 1.
 Hence we expect
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[mul](6) => ******:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
6
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
and six asterisks is what we get.
 
\end_layout

\begin_layout Standard
If 
\emph on
no
\emph default
 arguments are supplied to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset

, then both default values are called into play.
 Since the default value for the second parameter is 0 and, as we saw before,
 the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 macro behaves like zero, we expect 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset

 to print nothing, which is what happens.
\end_layout

\begin_layout Section
The 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset

 macro
\end_layout

\begin_layout Standard
A problem with these expansions in LyX is the 
\begin_inset Quotes els
\end_inset

debris
\begin_inset Quotes ers
\end_inset

 left behind.
 Although the macro insets won't show in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

 they disrupt the reading of the expanded document in LyX.
 But it's easy to deal with.
 We rename the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 macro:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[cut 1 []] :
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cut 1 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It's like a TeX or LaTeX 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
b
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
gobble
\end_layout

\end_inset

 function.
 Introduced into the definition of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset

 (and remembering to delete the previous definition from the dictionary
 -- the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
mul 0
\end_layout

\end_inset

 statement) we get
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
mul 0
\backslash
mul 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
tmp 0
\backslash
tmp 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
tmp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's redefine the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
char
\end_layout

\end_inset

 macro yet again: 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
char 0
\backslash
char 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
NB! This is a yellow note.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

.
 To give the yellow receptors of our eyes a good workout, let's print 24
 of these things:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
mul
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
8
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
3
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
or, for a different kind of workout, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
char 0
\backslash
char 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
.
\end_layout

\end_inset


\end_layout

\end_inset

try counting 94 dots:
\end_layout

\begin_layout Standard
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
10x
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
9
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
4
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Order of expansion
\end_layout

\begin_layout Standard
For these macros to work, it is essential that the argument of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset

 macro is expanded 
\emph on
before
\emph default
 being cut.
 That is programmed into 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

, not just for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset

 but more generally.
 If an argument to a macro contains a 
\emph on
top-level
\emph default
 (generally different) macro, then the argument is expanded before being
 
\begin_inset Quotes els
\end_inset

fed
\begin_inset Quotes ers
\end_inset

 to its parent macro.
 If it contains a macro or macros but only within other arguments, then
 the argument is not expanded.
 Suppose we have a macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
M
\end_layout

\end_inset

 which is in an argument to another macro.
 If the argument is like 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
(<non-macro stuff>M<other non-macro stuff>)
\end_layout

\end_inset

 then it 
\emph on
is
\emph default
 expanded; but an argument like 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
(<non-macro stuff>(M)<other non-macro stuff>)
\end_layout

\end_inset

, where 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
M
\end_layout

\end_inset

 is buried within an inner argument, 
\emph on
is
\emph default
 
\emph on
not
\emph default
 expanded.
 Once a macro is nested within an inner argument, it no longer triggers
 expansion of the outer argument.
\end_layout

\begin_layout Section
Global default value
\end_layout

\begin_layout Standard
What happens if 
\emph on
no
\emph default
 default value is provided to a macro with arguments? Take a very simple
 case, the identity macro,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[id 1 [
\backslash
1]]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
id 1 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
which simply regurgitates what it is fed.
 Thus: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
id
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Hello World!
\end_layout

\end_inset

 As defined, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
id
\end_layout

\end_inset

 has no default value specified.
 If it is used 
\emph on
without
\emph default
 a supplied argument, first it looks for a default value, which in this
 case isn't there, then it falls back on the 
\emph on
global default
\emph default
.
 Generally this is the empty string: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
id
\end_layout

\end_inset

 which should just leave a blank.
 
\end_layout

\begin_layout Standard
However, the global default can be changed.
 The way to do that is with the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-g
\end_layout

\end_inset

 option inserted in the global 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset (in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.Run script(s)
\end_layout

\end_inset

 inset).
 Entering, for instance, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-g *
\end_layout

\end_inset

 will now show global defaults as an asterisk.
 If you make this change, then use 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
id
\end_layout

\end_inset

 without an argument, the macro should now print an asterisk: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
id
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
To recover the empty string as global default, simply delete the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
-g
\end_layout

\end_inset

 option from the global 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.expand macro
\end_layout

\end_inset

 inset.
\end_layout

\begin_layout Chapter
The Twisted
\end_layout

\begin_layout Standard
(
\emph on
Twisted
\emph default
 as in 
\begin_inset Quotes els
\end_inset

twisted back on itself
\begin_inset Quotes ers
\end_inset

.)
\emph on
 
\emph default
Up to this point, the default values used for the various macros defined
 have been constants (that's if a default value has been specified at all),
 things like 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ui
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
File Handling
\end_layout

\end_inset

, or the global default (the empty string or an asterisk).
 Even the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
char
\end_layout

\end_inset

 macro used as a default for the repetition macros, once specified is a
 given quantity.
 
\end_layout

\begin_layout Section
\begin_inset Quotes els
\end_inset

Diagonal
\begin_inset Quotes ers
\end_inset

 defaults
\end_layout

\begin_layout Standard
Consider the definition
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m 1 (
\backslash
1)[
\backslash
1]]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
m 1 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We expect 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m](x) => x
\end_layout

\end_inset

, and that is easily confirmed.
 Also 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m]() => 
\end_layout

\end_inset

 , the empty string, as expected.
 (It's just the previous case with the empty string for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset

.) But what is 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m]
\end_layout

\end_inset

 with no argument given? I naïvely expected the global default: since there
 is no argument supplied, the macro falls back on the default argument,
 which is 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

, which is not given, which should, so I presumed, fall back on the global
 default.
 But it doesn't: it produces 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

!
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m](x)
\end_layout

\end_inset

 => 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset

: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
m
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m]()
\end_layout

\end_inset

 => 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
m
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[m]
\end_layout

\end_inset

 => 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
m
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Of course! When no argument is supplied, the macro calls on its default
 value for the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 parameter and substitutes that, namely 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
It's easy to 
\begin_inset Quotes els
\end_inset

remedy
\begin_inset Quotes ers
\end_inset

 this in the code, but such loopholes are to be seized on and treasured.
 The entire pLyX system is, in a way, based on such a 
\begin_inset Quotes els
\end_inset

diagonal
\begin_inset Quotes ers
\end_inset

 loophole -- exporting from files of extension 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
lyx
\end_layout

\end_inset

 to files of extension 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
lyx
\end_layout

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
And there are famous 
\begin_inset Quotes els
\end_inset

diagonal
\begin_inset Quotes ers
\end_inset

 arguments in mathematics with names like Cantor and Gödel attached.
 We are in illustrious company.
\end_layout

\end_inset

 Rather than plugging the loophole, exploit it.
\end_layout

\begin_layout Subsection
Order of substitution
\end_layout

\begin_layout Standard
For macros with more than one argument, further possibilities arise.
 For a macro with two arguments they are:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mm 2 (
\backslash
1)(
\backslash
1)[
\backslash
1
\backslash
2]]
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mm 2 (
\backslash
1)(
\backslash
2)[
\backslash
1
\backslash
2]]
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mm 2 (
\backslash
2)(
\backslash
1)[
\backslash
1
\backslash
2]]
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[mm 2 (
\backslash
2)(
\backslash
2)[
\backslash
1
\backslash
2]]
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
When analysing these it is necessary to be aware of the order in which 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
txtmacs.py
\end_layout

\end_inset

 makes substitutions.
 Initially, I had substitutions being made in the natural order, first for
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

, then for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

 and so on.
 That meant there was a restriction on the number of possible arguments
 a macro could take -- a maximum of nine (or potentially ten if 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 was included) -- since a sequence of three characters like 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
12
\end_layout

\end_inset

 would always be interpreted as the parameter 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 followed by the character 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

, rather than a twelfth parameter.
\end_layout

\begin_layout Standard
However, the use of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 
\begin_inset Quotes els
\end_inset

invisible punctuator
\begin_inset Quotes ers
\end_inset

 led to a reversed order of substitution for the parameters 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

, \SpecialChar \ldots{}
 -- largely because doing so simplifies the code.
 Substitution now occurs from last to first or, rather, from last to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

.
 Even a pure abbreviation -- a macro with no arguments -- can use the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 punctuator and it will function in the manner previously described.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In the LyX file, 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 is replaced by a new line character (
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Quotes els
\end_inset


\backslash
n
\begin_inset Quotes ers
\end_inset


\end_layout

\end_inset

).
 The empty string may have seemed a more natural replacement string, but
 it would cause an expression like 
\begin_inset Quotes els
\end_inset


\backslash

\backslash
00
\begin_inset Quotes ers
\end_inset

 to expand to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
backslash0
\end_layout

\end_inset

 in the LyX file and trigger an 
\begin_inset Quotes els
\end_inset

unknown token
\begin_inset Quotes ers
\end_inset

 error message.
 Instead 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Quotes els
\end_inset


\backslash
n
\begin_inset Quotes ers
\end_inset


\end_layout

\end_inset

 results in 
\end_layout

\begin_layout LyX-Code

\backslash
backslash
\end_layout

\begin_layout LyX-Code
0
\end_layout

\begin_layout Plain Layout
appearing in the LyX file, which is exactly what is wanted.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Number of arguments
\end_layout

\begin_layout Standard
A consequence of this reversed order is that there is (in any practical
 sense) 
\emph on
no
\emph default
 restriction on the number of arguments a macro may use.
 For instance, provided the macro has twelve or more arguments, the three-charac
ter sequence 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
12
\end_layout

\end_inset

 is interpreted as the twelfth parameter.
 Should you want it to be interpreted as parameter 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 followed by characer 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

, insert a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 punctuator between the 
\begin_inset Quotes els
\end_inset

1
\begin_inset Quotes ers
\end_inset

 and 
\begin_inset Quotes els
\end_inset

2
\begin_inset Quotes ers
\end_inset

.
 (Of course for a macro with fewer than twelve arguments, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
12
\end_layout

\end_inset

 will automatically be interpreted in the old way, as parameter 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 followed by character 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

.) Similar remarks apply for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
10
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
11
\end_layout

\end_inset

, \SpecialChar \ldots{}
, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
999
\end_layout

\end_inset

, \SpecialChar \ldots{}

\end_layout

\begin_layout Section
Redefining 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose we want to use the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macros for purposes other than providing, or not, the menu separator character
 in menu macros.
 To do so, we need a convenient way of changing their default values.
 We can use the following macros (the names come from 
\emph on
c
\emph default
hange 
\emph on
if
\emph default
):
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif0 2 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0 0
\backslash
if0 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
cif1 2 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if1 0
\backslash
if1 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
What they do is expand to the macro insets containing the 
\emph on
definitions
\emph default
 of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 but with the arguments 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

 available for changing default values and expansion styling.
 Suppose, in fact, that in a fit of geekiness we want the default values
 to be 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
foo
\end_layout

\end_inset

 for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
bah
\end_layout

\end_inset

 for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

, and the text to be bolded in the one case, emphasized in the other:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[cif0]({bold}
\backslash
1)(foo) =>
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\series bold

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
foo
\end_layout

\end_inset

 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[cif1]({emph}
\backslash
1)(bah) =>
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\emph on

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
bah
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(These should give no trace to the right of the arrows in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
pdf
\end_layout

\end_inset

.) Repeating an earlier exercise, the geeky changes are made:
\end_layout

\begin_layout Quote
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0](x) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0]() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1](x) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Changing 
\emph on
only
\emph default
 the default values
\end_layout

\begin_layout Standard
But we may want to change 
\emph on
only 
\emph default
the default values.
 In that case having to also supply the first argument in the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif
\end_layout

\end_inset

 macros is an irritation.
 If we don't, if we supply only one argument, necessarily the second, then
 in the definitions just given, 
\emph on
no
\emph default
 default values are specified so that for the first the macro falls back
 on the global default, which is usually the empty string (but may still
 be an asterisk after an earlier experiment).
 That is not what is wanted.
\end_layout

\begin_layout Standard
Alternatively, we can add 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset

 to our definitions as an 
\begin_inset Quotes els
\end_inset

on diagonal
\begin_inset Quotes ers
\end_inset

 default:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif0 0
\backslash
cif0 2 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0 0
\backslash
if0 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
cif1 0
\backslash
cif1 2 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if1 0
\backslash
if1 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now when specifying only the second argument as here, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
A
\end_layout

\end_inset

, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
B
\end_layout

\end_inset

, the expected results emerge: 
\end_layout

\begin_layout Quote
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0](x) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0]() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if0] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1](x) => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]() => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1] => 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Intricacies
\end_layout

\begin_layout Standard
However, there are intricate effects at play when only one argument is supplied
 to the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif
\end_layout

\end_inset

 macros.
 Suppose we make the default value in, say, the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset

 definition 
\color red
red
\color inherit
, as here,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[cif1 0
\backslash
cif1 2 ({red}
\backslash
1)[[if1 0
\backslash
if1 1 (
\backslash
2)[
\backslash
1]]]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif1 0
\backslash
cif1 2 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\color red

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if1 0
\backslash
if1 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
then explicitly change the style with a two-argument instance here, 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\family sans
\series bold

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
foo
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Because two arguments have been supplied, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset

 doesn't need to call on the default value and so we expect 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 to output in bold sans serif:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1](bold sans):
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
bold sans
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]():
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
as it does.
 But a one-argument change of default value here, 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
bah
\end_layout

\end_inset


\end_layout

\begin_layout Standard
means 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset

 
\emph on
does
\emph default
 need to call on the default value for its first argument, so all output
 from 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 should now be red,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1](red):
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
red
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]():
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
as it is.
 Life is getting complicated.
\end_layout

\begin_layout Standard
But to prevent complicating later material, I shall reset the default value
 of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset

 to 
\begin_inset Quotes els
\end_inset

no color
\begin_inset Quotes ers
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif1 0
\backslash
cif1 2 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if1 0
\backslash
if1 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Manipulating macro names
\end_layout

\begin_layout Standard
Throughout the discussion of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macros, each definition has been duplicated, once for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 and once for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

.
 A natural thought is: can we define a macro which takes 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

 as an argument and produces a definition of the corresponding 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro? Consider the definiton (
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
dif
\end_layout

\end_inset

 from 
\emph on
d
\emph default
efine 
\emph on
if
\emph default
):
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[dif 3 (
\backslash
1)[[cut]([if
\backslash
3 0
\backslash
if
\backslash
3 1 (
\backslash
2)[
\backslash
1]])]]:
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
dif 3 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if
\backslash
3 0
\backslash
if
\backslash
3 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This takes three arguments, the third or outermost determining which of
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset

 or 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

 is being defined (including the initial 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\backslash
3 0
\end_layout

\end_inset

 to delete any existing definition).
 The name of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro is determined dynamically, as part of the expansion.
 The second argument determines the default value for that 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro.
 Again an 
\begin_inset Quotes els
\end_inset

on diagonal
\begin_inset Quotes ers
\end_inset

 default value is supplied for the first argument.
 It means we can use the macro with only two supplied arguments.
 Let's try it out.
 Since the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset

 macro has been used, we anticipate 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[dif](P)(0): 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
dif
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
P
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
leaving no 
\begin_inset Quotes els
\end_inset

residue
\begin_inset Quotes ers
\end_inset

 to the right of the colon but now, when we write 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 with no arguments so that it has to fall back on its new default value,
 it should expand to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
P
\end_layout

\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[if0] => P: 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
which it does.
 Similarly, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[dif](Q)(1)
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
dif
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Q
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

 should result in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]
\end_layout

\end_inset

 expanding to Q,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[if1] => Q: 
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
which it does.
\end_layout

\begin_layout Section
A 
\begin_inset Quotes els
\end_inset

proper
\begin_inset Quotes ers
\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro
\end_layout

\begin_layout Standard
The 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 macros give one 
\begin_inset Quotes els
\end_inset

variable
\begin_inset Quotes ers
\end_inset

 alternative -- the default value -- and one 
\begin_inset Quotes els
\end_inset

forced
\begin_inset Quotes ers
\end_inset

 alternative -- the supplied argument.
 For a 
\begin_inset Quotes els
\end_inset

proper
\begin_inset Quotes ers
\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro both alternatives should be variable.
 It's not hard to manufacture such a one from 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

.
 Since 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if1]()
\end_layout

\end_inset

 outputs 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

's default value, and 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[if0](x)
\end_layout

\end_inset

 outputs 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

's (generally different) default value, consider the definition:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
[if 1 [[if1]([if0](
\backslash
1))]]:
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This should expand according to the pattern (now with the P, Q defaults)
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if](x) => [if1]([if0](x)) => [if1](P) => P:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if]() => [if1]([if0]()) => [if1]() => Q:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The macro works because the argument of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

 contains a macro, namely 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
if0
\end_layout

\end_inset

, and is therefore expanded out 
\emph on
before
\emph default
 being 
\begin_inset Quotes els
\end_inset

fed
\begin_inset Quotes ers
\end_inset

 to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
However, for the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro to behave properly the default value for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 must be a 
\emph on
non-empty
\emph default
 string and to that extent this is not a complete answer to the problem
 of providing a general if-macro.
 If 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
P
\end_layout

\end_inset

 is an empty string, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 should expand to an empty string.
 Instead 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if](x) => [if1]([if0](x)) => [if1]() => Q
\end_layout

\end_inset

, which will generally not be empty.
 
\end_layout

\begin_layout Subsection
The 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset

 macro
\end_layout

\begin_layout Standard
Suppose we always clothed 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

 in an argument inset so that the default value in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 was not 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

 but 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
(
\backslash
2)
\end_layout

\end_inset

.
 Then, when 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset

 is the empty string, 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if](x)()(Q) => [if1]([if0](x)) => [if1](()) => ()
\end_layout

\end_inset

.
 That's encouraging.
 All that is needed now is a means of peeling off the argument inset.
 That function is provided by the built-in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset

 macro, which removes a nested 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
.[argument]
\end_layout

\end_inset

 inset but does not affect more deeply nested insets (like peeling the skin
 from an onion).
 Thus
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[peel](x) => x; [peel]((x)) => x; [peel](((x))) => (x); etc.
\end_layout

\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset

; 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\end_inset

; 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Redefining 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We need to build-in to 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif0
\end_layout

\end_inset

 this new extra-argument-wrapper feature:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[cif0 0
\backslash
cif0 2 (
\backslash
1)[[if0 0
\backslash
if0 1 ((
\backslash
2))[
\backslash
1]]]:
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cif0 0
\backslash
cif0 2 
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0 0
\backslash
if0 1 
\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now redefine 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 to incorporate the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset

 macro:
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if 0
\backslash
if 1 [[peel]([if1]([if0](
\backslash
1)))]]:
\end_layout

\end_inset

 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if 0
\backslash
if 1 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
peel
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's see what happens in the two cases.
 First, we make the default of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 an empty string: 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if](x)()(Z) => [peel]([if1]([if0](x))) => [peel]([if1](())) => [peel](())
 => :
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then we change the default of 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if0
\end_layout

\end_inset

 to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Y
\end_layout

\end_inset

 (in fact to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
(Y)
\end_layout

\end_inset

): 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Y
\end_layout

\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[if](x)(Y)(Z) => [peel]([if1]([if0](x))) => [peel]([if1](Y)) => [peel](Y)
 => Y:
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And so, finally, we have a proper if-macro.
\end_layout

\begin_layout Subsection
If-then-else
\end_layout

\begin_layout Standard
Rather than the two-stage process of specifying the 
\begin_inset Quotes els
\end_inset

then
\begin_inset Quotes ers
\end_inset

 and 
\begin_inset Quotes els
\end_inset

else
\begin_inset Quotes ers
\end_inset

 outcomes first, and then using the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 macro, we can combine them into a one-stage process by incorporating the
 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif
\end_layout

\end_inset

 macros into the definition.
 Call this macro 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
ifte
\end_layout

\end_inset

 (from 
\emph on
if
\emph default
-
\emph on
t
\emph default
hen-
\emph on
e
\emph default
lse):
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
ifte 0
\backslash
ifte 3 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
cut
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
2
\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
cif1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
3
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
peel
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
if1
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
if0
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\backslash
1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Note that this uses the redefined 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cif0
\end_layout

\end_inset

 macro.) No default values for 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
ifte
\end_layout

\end_inset

 have been specified.
 From the point of view of default values, a more natural ordering of the
 arguments would be 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[ifte](else-clause)(then-clause)(if-test)
\end_layout

\end_inset

 rather than the present 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[ifte](if-test)(then-clause)(else-clause)
\end_layout

\end_inset

.
 However, the present ordering is so entrenched it is probably less confusing
 to follow suit and insist on all three arguments 
\emph on
always
\emph default
 being supplied, even if empty.
 
\end_layout

\begin_layout Standard
If a non-empty first argument is supplied to 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
if
\end_layout

\end_inset

 then the macro expands to the then-clause, the middle argument; if an empty
 first argument is supplied it expands to the else-clause, the final argument:
 
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[ifte](x)(Y)(Z) => Y:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
ifte
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Y
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Z
\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[ifte]()(Y)(Z) => Z:
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status open

\begin_layout Plain Layout
ifte
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Y
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
Z
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
And we can test that our 
\begin_inset Quotes els
\end_inset

cure
\begin_inset Quotes ers
\end_inset

 for when Y is the empty string has taken effect by checking
\end_layout

\begin_layout Quote
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status open

\begin_layout Plain Layout
[ifte](x)()(Z) => :
\end_layout

\end_inset

 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
ifte
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
x
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
Z
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
and all is, indeed, well.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
I started by writing a script that would expand abbreviations and found
 that more than just text could be treated as an 
\begin_inset Quotes els
\end_inset

abbreviation
\begin_inset Quotes ers
\end_inset

 -- and as a bonus that abbreviations could be nested, one within another.
 That was nice.
 One use of abbreviations was for inserting menu sequences, including the
 menu separation character and sans serif formatting as in the LyX manuals.
 That was nice, too, but limited.
 Menu abbreviations needed to take arguments to take account of the way
 a menu splits into different choices.
 So the code developed to take arguments and duly accommodated the first
 incarnation of the Tools/Preferences macro.
 That led to a further requirement, for conditionals to allow the full range
 of menu expression.
 That too is done.
 A side-effect was the introduction of the 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout

\backslash

\backslash
00
\end_layout

\end_inset

 
\begin_inset Quotes els
\end_inset

invisible punctuator
\begin_inset Quotes ers
\end_inset

, and a side-effect of that was the reversal of the order in which substitutions
 are made, and a side-effect of 
\emph on
that 
\emph default
was the lifting of the restriction on the number of arguments to a macro.
 Experimenting with the repetition macros showed the need for a 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset

 macro to 
\begin_inset Quotes els
\end_inset

remove debris
\begin_inset Quotes ers
\end_inset

, and that forced a modification of the code that ensured arguments containing
 macros were expanded 
\emph on
before
\emph default
 being fed to their parent macro.
 Attempts to write a 
\begin_inset Quotes els
\end_inset

proper
\begin_inset Quotes ers
\end_inset

 if-macro led to the built-in 
\begin_inset Flex .expand macro|txtmacs
status collapsed

\begin_layout Plain Layout
fn
\end_layout

\end_inset


\begin_inset Flex .[argument]
status collapsed

\begin_layout Plain Layout
peel
\end_layout

\end_inset

 macro.
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
How much of these later developments is useful in day-to-day use of LyX,
 I don't know.
 It is too new; I haven't had time to really 
\begin_inset Quotes els
\end_inset

play
\begin_inset Quotes ers
\end_inset

 with it, let alone use it in earnest.
 But the earlier material, certainly up to the full development of the Tools/Pre
ferences macro, I have found invaluable, and wouldn't consider working on
 any major project in LyX now without this facility to hand.
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
Andrew Parsloe
\end_layout

\begin_layout Plain Layout
31 December 2012
\end_layout

\end_inset


\end_layout

\end_body
\end_document
